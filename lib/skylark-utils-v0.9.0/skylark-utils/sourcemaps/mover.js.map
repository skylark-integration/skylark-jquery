{"version":3,"sources":["mover.js"],"names":["define","skylark","langx","noder","datax","geom","eventer","styler","movable","elm","params","updateWithTouchData","e","keys","i","changedTouches","split","length","overlayDiv","downButton","start","stop","startX","startY","originalPos","size","handleEl","handle","constraints","doc","document","startedCallback","started","movingCallback","moving","stoppedCallback","stopped","cursor","docSize","getDocumentSize","preventDefault","button","screenX","screenY","relativePosition","css","createElement","position","top","left","width","height","zIndex","opacity","append","body","on","move","deltaX","deltaY","l","t","minX","maxX","minY","maxY","off","remove","mover","attr","removeAttr","pagePosition","addClass","mixin"],"mappings":";;;;;;;AAAAA,QACI,YACA,UACA,UACA,UACA,SACA,YACA,YACF,SAASC,EAASC,EAAMC,EAAMC,EAAMC,EAAKC,EAAQC,GAU/C,QAASC,GAAQC,EAAKC,GAClB,QAASC,GAAoBC,GACzB,GAAIC,GAAMC,CAEV,IAAIF,EAAEG,eAEF,IADAF,EAAO,8CAA8CG,MAAM,KACtDF,EAAI,EAAGA,EAAID,EAAKI,OAAQH,IACzBF,EAAEC,EAAKC,IAAMF,EAAEG,eAAe,GAAGF,EAAKC,IAKlDJ,EAASA,KACT,IAEIQ,GAEAC,EACAC,EACAC,EAEAC,EACAC,EACAC,EACAC,EAXAC,EAAWhB,EAAOiB,QAAUlB,EAC5BmB,EAAclB,EAAOkB,YAErBC,EAAMnB,EAAOoB,UAAYA,SASzBC,EAAkBrB,EAAOsB,QACzBC,EAAiBvB,EAAOwB,OACxBC,EAAkBzB,EAAO0B,QAEzBhB,EAAQ,SAASR,GACb,GACIyB,GADAC,EAAUjC,EAAKkC,gBAAgBV,EAGnClB,GAAoBC,GAEpBA,EAAE4B,iBACFrB,EAAaP,EAAE6B,OAEfnB,EAASV,EAAE8B,QACXnB,EAASX,EAAE+B,QAEXnB,EAAcnB,EAAKuC,iBAAiBnC,GACpCgB,EAAOpB,EAAKoB,KAAKhB,GAGjB4B,EAAS9B,EAAOsC,IAAInB,EAAU,UAE9BR,EAAaf,EAAM2C,cAAc,OACjCvC,EAAOsC,IAAI3B,GACP6B,SAAU,WACVC,IAAK,EACLC,KAAM,EACNC,MAAOZ,EAAQY,MACfC,OAAQb,EAAQa,OAChBC,OAAQ,WACRC,QAAS,KACThB,OAAQA,IAEZlC,EAAMmD,OAAOzB,EAAI0B,KAAMrC,GAEvBZ,EAAQkD,GAAG3B,EAAK,sBAAuB4B,GAAMD,GAAG3B,EAAK,mBAAoBR,GAErEU,GACAA,EAAgBnB,IAIxB6C,EAAO,SAAS7C,GAGZ,GAFAD,EAAoBC,GAEH,IAAbA,EAAE6B,OACF,MAAOpB,GAAKT,EAGhBA,GAAE8C,OAAS9C,EAAE8B,QAAUpB,EACvBV,EAAE+C,OAAS/C,EAAE+B,QAAUpB,CAEvB,IAAIqC,GAAIpC,EAAYyB,KAAOrC,EAAE8C,OACzBG,EAAIrC,EAAYwB,IAAMpC,EAAE+C,MACxB/B,KAEIgC,EAAIhC,EAAYkC,OAChBF,EAAIhC,EAAYkC,MAGhBF,EAAIhC,EAAYmC,OAChBH,EAAIhC,EAAYmC,MAGhBF,EAAIjC,EAAYoC,OAChBH,EAAIjC,EAAYoC,MAGhBH,EAAIjC,EAAYqC,OAChBJ,EAAIjC,EAAYqC,OAGxB5D,EAAKuC,iBAAiBnC,GAClBwC,KAAMW,EACNZ,IAAKa,IAGTjD,EAAE4B,iBACEP,GACAA,EAAerB,IAIvBS,EAAO,SAAST,GACZD,EAAoBC,GAEpBN,EAAQ4D,IAAIrC,EAAK,sBAAuB4B,GAAMS,IAAIrC,EAAK,mBAAoBR,GAE3ElB,EAAMgE,OAAOjD,GAETiB,GACAA,EAAgBvB,GAM5B,OAFAN,GAAQkD,GAAG9B,EAAU,uBAAwBN,IAIzC+C,OAAQ,WACJ7D,EAAQ4D,IAAIxC,KAKxB,QAAS0C,KACP,MAAOA,GA5IA9D,EAAQkD,GACPlD,EAAQ4D,IACP9D,EAAMiE,KACAjE,EAAMkE,WACVjE,EAAKkE,aACHhE,EAAOiE,SACTnE,EAAK8C,MA+IlB,OANAjD,GAAMuE,MAAML,GAER5D,QAASA,IAINP,EAAQmE,MAAQA","file":"../mover.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n],function(skylark, langx,noder,datax,geom,eventer,styler){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    function movable(elm, params) {\r\n        function updateWithTouchData(e) {\r\n            var keys, i;\r\n\r\n            if (e.changedTouches) {\r\n                keys = \"screenX screenY pageX pageY clientX clientY\".split(' ');\r\n                for (i = 0; i < keys.length; i++) {\r\n                    e[keys[i]] = e.changedTouches[0][keys[i]];\r\n                }\r\n            }\r\n        }\r\n\r\n        params = params || {};\r\n        var handleEl = params.handle || elm,\r\n            constraints = params.constraints,\r\n            overlayDiv,\r\n            doc = params.document || document,\r\n            downButton,\r\n            start,\r\n            stop,\r\n            drag,\r\n            startX,\r\n            startY,\r\n            originalPos,\r\n            size,\r\n            startedCallback = params.started,\r\n            movingCallback = params.moving,\r\n            stoppedCallback = params.stopped,\r\n\r\n            start = function(e) {\r\n                var docSize = geom.getDocumentSize(doc),\r\n                    cursor;\r\n\r\n                updateWithTouchData(e);\r\n\r\n                e.preventDefault();\r\n                downButton = e.button;\r\n                //handleEl = getHandleEl();\r\n                startX = e.screenX;\r\n                startY = e.screenY;\r\n\r\n                originalPos = geom.relativePosition(elm);\r\n                size = geom.size(elm);\r\n\r\n                // Grab cursor from handle so we can place it on overlay\r\n                cursor = styler.css(handleEl, \"curosr\");\r\n\r\n                overlayDiv = noder.createElement(\"div\");\r\n                styler.css(overlayDiv, {\r\n                    position: \"absolute\",\r\n                    top: 0,\r\n                    left: 0,\r\n                    width: docSize.width,\r\n                    height: docSize.height,\r\n                    zIndex: 0x7FFFFFFF,\r\n                    opacity: 0.0001,\r\n                    cursor: cursor\r\n                });\r\n                noder.append(doc.body, overlayDiv);\r\n\r\n                eventer.on(doc, \"mousemove touchmove\", move).on(doc, \"mouseup touchend\", stop);\r\n\r\n                if (startedCallback) {\r\n                    startedCallback(e);\r\n                }\r\n            },\r\n\r\n            move = function(e) {\r\n                updateWithTouchData(e);\r\n\r\n                if (e.button !== 0) {\r\n                    return stop(e);\r\n                }\r\n\r\n                e.deltaX = e.screenX - startX;\r\n                e.deltaY = e.screenY - startY;\r\n\r\n                var l = originalPos.left + e.deltaX,\r\n                    t = originalPos.top + e.deltaY;\r\n                if (constraints) {\r\n\r\n                    if (l < constraints.minX) {\r\n                        l = constraints.minX;\r\n                    }\r\n\r\n                    if (l > constraints.maxX) {\r\n                        l = constraints.maxX;\r\n                    }\r\n\r\n                    if (t < constraints.minY) {\r\n                        t = constraints.minY;\r\n                    }\r\n\r\n                    if (t > constraints.maxY) {\r\n                        t = constraints.maxY;\r\n                    }\r\n                }\r\n                geom.relativePosition(elm, {\r\n                    left: l,\r\n                    top: t\r\n                })\r\n\r\n                e.preventDefault();\r\n                if (movingCallback) {\r\n                    movingCallback(e);\r\n                }\r\n            },\r\n\r\n            stop = function(e) {\r\n                updateWithTouchData(e);\r\n\r\n                eventer.off(doc, \"mousemove touchmove\", move).off(doc, \"mouseup touchend\", stop);\r\n\r\n                noder.remove(overlayDiv);\r\n\r\n                if (stoppedCallback) {\r\n                    stoppedCallback(e);\r\n                }\r\n            };\r\n\r\n        eventer.on(handleEl, \"mousedown touchstart\", start);\r\n\r\n        return {\r\n            // destroys the dragger.\r\n            remove: function() {\r\n                eventer.off(handleEl);\r\n            }\r\n        }\r\n    }\r\n\r\n    function mover(){\r\n      return mover;\r\n    }\r\n\r\n    langx.mixin(mover, {\r\n\r\n        movable: movable\r\n\r\n    });\r\n\r\n    return skylark.mover = mover;\r\n});\r\n"]}