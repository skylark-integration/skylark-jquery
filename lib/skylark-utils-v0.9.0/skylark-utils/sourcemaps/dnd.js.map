{"version":3,"sources":["dnd.js"],"names":["define","skylark","langx","noder","datax","geom","eventer","styler","draggable","elm","params","Draggable","droppable","Droppable","dnd","DndManager","on","off","attr","removeAttr","pagePosition","addClass","height","Evented","inherit","klassName","init","start","event","p","this","draggingOffsetX","parseInt","pageX","left","draggingOffsetY","pageY","top","e","create","ghost","transfer","trigger","dragging","draggingGhost","draggingTransfer","each","key","value","dataTransfer","setData","setDragImage","effectAllowed","end","manager","self","draggingClass","allowed","_params","forEach","eventName","isFunction","mousedown","prop","mouseup","dragstart","dragend","stop","removeClass","handle","mouseenter","mouseleave","hoverClass","activeClass","acceptable","dragover","stopPropagation","e2","preventDefault","dropEffect","dragenter","dragleave","drop","mixin"],"mappings":"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","file":"../dnd.js","sourcesContent":["define([\r\n    \"./skylark\",\r\n    \"./langx\",\r\n    \"./noder\",\r\n    \"./datax\",\r\n    \"./geom\",\r\n    \"./eventer\",\r\n    \"./styler\"\r\n],function(skylark, langx,noder,datax,geom,eventer,styler){\r\n    var on = eventer.on,\r\n        off = eventer.off,\r\n        attr = datax.attr,\r\n        removeAttr = datax.removeAttr,\r\n        offset = geom.pagePosition,\r\n        addClass = styler.addClass,\r\n        height = geom.height;\r\n\r\n\r\n    var DndManager = langx.Evented.inherit({\r\n      klassName : \"DndManager\",\r\n\r\n      init : function() {\r\n\r\n      },\r\n\r\n      start : function(draggable,event) {\r\n\r\n        var p = geom.pagePosition(draggable.elm);\r\n        this.draggingOffsetX = parseInt(event.pageX - p.left);\r\n        this.draggingOffsetY = parseInt(event.pageY - p.top)\r\n\r\n        var e = eventer.create(\"started\",{\r\n          ghost : null,\r\n          transfer : {\r\n          }\r\n        });\r\n\r\n        draggable.trigger(e);\r\n\r\n        this.dragging = draggable;\r\n        this.draggingGhost = e.ghost;\r\n        if (!this.draggingGhost) {\r\n          this.draggingGhost = draggable.elm;\r\n        }\r\n\r\n        this.draggingTransfer = e.transfer;\r\n        if (this.draggingTransfer) {\r\n\r\n            langx.each(this.draggingTransfer,function(key,value){\r\n                event.dataTransfer.setData(key, value);\r\n            });\r\n        }\r\n\r\n        event.dataTransfer.setDragImage(this.draggingGhost, this.draggingOffsetX, this.draggingOffsetY);\r\n\r\n        event.dataTransfer.effectAllowed = \"copyMove\";\r\n\r\n        this.trigger(e);\r\n      },\r\n\r\n      end : function() {\r\n        var e = eventer.create(\"ended\",{\r\n        });        \r\n        this.trigger(e);\r\n\r\n        this.dragging = null;\r\n        this.draggingTransfer = null;\r\n        this.draggingGhost = null;\r\n        this.draggingOffsetX = null;\r\n        this.draggingOffsetY = null;\r\n      }\r\n    });\r\n\r\n    var manager = new DndManager(),\r\n        draggingHeight,\r\n        placeholders = [];\r\n\r\n\r\n\r\n    var Draggable = langx.Evented.inherit({\r\n      klassName : \"Draggable\",\r\n\r\n      init : function (elm,params) {\r\n        var self = this,\r\n            draggingClass = params.draggingClass || \"dragging\",\r\n            allowed = false;\r\n\r\n        self.elm = elm;\r\n        self._params = params;\r\n\r\n        [\"started\", \"ended\", \"moving\"].forEach(function(eventName) {\r\n            if (langx.isFunction(params[eventName])) {\r\n                self.on(eventName, params[eventName]);\r\n            }\r\n        });\r\n\r\n\r\n        eventer.on(elm,{\r\n          \"mousedown\" : function(e) {\r\n            if (allowed === true) {\r\n              datax.prop(self.elm, \"draggable\", true);\r\n            }\r\n          },\r\n\r\n          \"mouseup\" :   function(e) {\r\n            datax.prop(self.elm, \"draggable\", false);\r\n          },\r\n\r\n          \"dragstart\":  function(e) {\r\n            manager.start(self, e);\r\n            styler.addClass(self.elm,draggingClass);\r\n          },\r\n\r\n          \"dragend\":   function(e){\r\n            eventer.stop(e);\r\n\r\n            if (!manager.dragging) {\r\n              return;\r\n            }\r\n\r\n            styler.removeClass(self.elm,draggingClass);\r\n\r\n            manager.end();\r\n          }\r\n        });\r\n\r\n        if (params.handle) {\r\n          eventer.on(elm,{\r\n            \"mouseenter\" : function(e) {\r\n              allowed = true;\r\n            },\r\n            \"mouseleave\" : function(e) {\r\n              allowed = false;\r\n            }\r\n          },params.handle);\r\n        } else {\r\n          allowed = true;\r\n        }\r\n\r\n      }\r\n\r\n    });\r\n\r\n\r\n    var Droppable = langx.Evented.inherit({\r\n      klassName : \"Droppable\",\r\n\r\n      init : function(elm,params) {\r\n        var self = this,\r\n            draggingClass = params.draggingClass || \"dragging\",\r\n            hoverClass,\r\n            activeClass,\r\n            acceptable = true;\r\n\r\n        self.elm = elm;\r\n        self._params = params;\r\n\r\n        [\"started\",\"ended\",\"entered\", \"leaved\", \"dropped\",\"overing\"].forEach(function(eventName) {\r\n            if (langx.isFunction(params[eventName])) {\r\n                self.on(eventName, params[eventName]);\r\n            }\r\n        });\r\n\r\n        eventer.on(elm,{\r\n          \"dragover\" : function(e) {\r\n            e.stopPropagation()\r\n\r\n            if (!acceptable) {\r\n              return\r\n            }\r\n\r\n            var e2 = eventer.create(\"overing\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n            self.trigger(e2);\r\n\r\n            e.preventDefault() // allow drop\r\n\r\n            e.dataTransfer.dropEffect = \"copyMove\";\r\n\r\n          },\r\n\r\n          \"dragenter\" :   function(e) {\r\n            var params = self._params,\r\n                elm = self.elm;\r\n\r\n            var e2 = eventer.create(\"entered\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            e.stopPropagation()\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.addClass(elm,hoverClass)\r\n            }\r\n          },\r\n\r\n          \"dragleave\":  function(e) {\r\n            var params = self._params,\r\n                elm = self.elm;\r\n            if (!acceptable) return false\r\n            \r\n            var e2 = eventer.create(\"leaved\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n            \r\n            self.trigger(e2);\r\n\r\n            e.stopPropagation()\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.removeClass(elm,hoverClass);\r\n            }\r\n          },\r\n\r\n          \"drop\":   function(e){\r\n            var params = self._params,\r\n                elm = self.elm;\r\n\r\n            eventer.stop(e); // stops the browser from redirecting.\r\n\r\n            if (!manager.dragging) return\r\n\r\n           // manager.dragging.elm.removeClass('dragging');\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.addClass(elm,hoverClass)\r\n            }\r\n\r\n            var e2 = eventer.create(\"dropped\",{\r\n                transfer : manager.draggingTransfer\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            manager.end()\r\n          }\r\n        });\r\n\r\n        manager.on(\"started\",function(e){\r\n            var e2 = eventer.create(\"started\",{\r\n                transfer : manager.draggingTransfer,\r\n                acceptable : false\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            acceptable = e2.acceptable;\r\n            hoverClass = e2.hoverClass;\r\n            activeClass = e2.activeClass;\r\n\r\n            if (activeClass && acceptable) {\r\n              styler.addClass(elm,activeClass);\r\n            }\r\n\r\n         }).on(\"ended\" , function(e){\r\n            var e2 = eventer.create(\"ended\",{\r\n                transfer : manager.draggingTransfer,\r\n                acceptable : false\r\n            });\r\n\r\n            self.trigger(e2);\r\n\r\n            if (hoverClass && acceptable) {\r\n              styler.removeClass(elm,hoverClass);\r\n            }\r\n            if (activeClass && acceptable) {\r\n              styler.removeClass(elm,activeClass);\r\n            }\r\n\r\n            acceptable = false;\r\n            activeClass = null;\r\n            hoverClass = null;\r\n        });\r\n\r\n      }\r\n    });\r\n\r\n\r\n    function draggable(elm, params) {\r\n      return new Draggable(elm,params);\r\n    }\r\n\r\n    function droppable(elm, params) {\r\n      return new Droppable(elm,params);\r\n    }\r\n\r\n    function dnd(){\r\n      return dnd;\r\n    }\r\n\r\n    langx.mixin(dnd, {\r\n       //params ： {\r\n        //  target : Element or string or function\r\n        //  handle : Element\r\n        //  copy : boolean\r\n        //  placeHolder : \"div\"\r\n        //  hoverClass : \"hover\"\r\n        //  start : function\r\n        //  enter : function\r\n        //  over : function\r\n        //  leave : function\r\n        //  drop : function\r\n        //  end : function\r\n        //\r\n        //\r\n        //}\r\n        draggable   : draggable,\r\n\r\n        //params ： {\r\n        //  accept : string or function\r\n        //  placeHolder\r\n        //\r\n        //\r\n        //\r\n        //}\r\n        droppable : droppable,\r\n\r\n        manager : manager\r\n\r\n\r\n    });\r\n\r\n    return skylark.dnd = dnd;\r\n});\r\n"]}