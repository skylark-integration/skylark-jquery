{"version":3,"sources":["callbacks.js"],"names":["define","$","Callbacks","options","extend","memory","fired","firing","firingStart","firingLength","firingIndex","list","stack","once","fire","data","length","apply","stopOnFalse","shift","disable","add","start","args","each","_","arg","unique","has","push","arguments","this","remove","index","inArray","splice","fn","empty","undefined","disabled","lock","locked","fireWith","context","slice"],"mappings":";;;;;;;AAAAA,QACI,UACD,SAASC,GA0HR,MA9GAA,GAAEC,UAAY,SAASC,GACnBA,EAAUF,EAAEG,UAAWD,EAEvB,IAAIE,GACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KACAC,GAAST,EAAQU,SACjBC,EAAO,SAASC,GAOZ,IANAV,EAASF,EAAQE,QAAUU,EAC3BT,GAAQ,EACRI,EAAcF,GAAe,EAC7BA,EAAc,EACdC,EAAeE,EAAKK,OACpBT,GAAS,EACFI,GAAQD,EAAcD,IAAgBC,EACzC,GAAIC,EAAKD,GAAaO,MAAMF,EAAK,GAAIA,EAAK,OAAQ,GAASZ,EAAQe,YAAa,CAC5Eb,GAAS,CACT,OAGRE,GAAS,EACLI,IACIC,EAAOA,EAAMI,QAAUF,EAAKF,EAAMO,SAC7Bd,EAAQM,EAAKK,OAAS,EAC1Bd,EAAUkB,YAIvBlB,GACImB,IAAK,WACD,GAAIV,EAAM,CACN,GAAIW,GAAQX,EAAKK,OACbK,EAAM,SAASE,GACXtB,EAAEuB,KAAKD,EAAM,SAASE,EAAGC,GACF,kBAARA,GACFvB,EAAQwB,QAAWzB,EAAU0B,IAAIF,IAAMf,EAAKkB,KAAKH,GAC/CA,GAAOA,EAAIV,QAAyB,gBAARU,IAAkBL,EAAIK,KAGzEL,GAAIS,WACAvB,EAAQE,EAAeE,EAAKK,OACvBX,IACLG,EAAcc,EACdR,EAAKT,IAGb,MAAO0B,OAEXC,OAAQ,WAcJ,MAbIrB,IACAV,EAAEuB,KAAKM,UAAW,SAASL,EAAGC,GAE1B,IADA,GAAIO,IACIA,EAAQhC,EAAEiC,QAAQR,EAAKf,EAAMsB,QACjCtB,EAAKwB,OAAOF,EAAO,GAEf1B,IACI0B,GAASxB,KAAgBA,EACzBwB,GAASvB,KAAeA,KAKrCqB,MAEXH,IAAK,SAASQ,GACV,SAAUzB,KAASyB,EAAKnC,EAAEiC,QAAQE,EAAIzB,MAAaA,EAAKK,UAE5DqB,MAAO,WAEH,MADA5B,GAAeE,EAAKK,OAAS,EACtBe,MAEXX,QAAS,WAEL,MADAT,GAAOC,EAAQP,EAASiC,OACjBP,MAEXQ,SAAU,WACN,OAAQ5B,GAEZ6B,KAAM,WAGF,MAFA5B,GAAQ0B,OACHjC,GAAQH,EAAUkB,UAChBW,MAEXU,OAAQ,WACJ,OAAQ7B,GAEZ8B,SAAU,SAASC,EAASpB,GAOxB,OANIZ,GAAUL,IAASM,IACnBW,EAAOA,MACPA,GAAQoB,EAASpB,EAAKqB,MAAQrB,EAAKqB,QAAUrB,GACzChB,EAAQK,EAAMiB,KAAKN,GAClBT,EAAKS,IAEPQ,MAEXjB,KAAM,WACF,MAAOZ,GAAUwC,SAASX,KAAMD,YAEpCxB,MAAO,WACH,QAASA,GAIrB,OAAOJ,IAGJD","file":"../callbacks.js","sourcesContent":["define([\n    \"./core\"\n], function($) {\n\n    //     This module is borrow from zepto.callback.js\n    //     (c) 2010-2014 Thomas Fuchs\n    //     Zepto.js may be freely distributed under the MIT license.\n\n    // Create a collection of callbacks to be fired in a sequence, with configurable behaviour\n    // Option flags:\n    //   - once: Callbacks fired at most one time.\n    //   - memory: Remember the most recent context and arguments\n    //   - stopOnFalse: Cease iterating over callback list\n    //   - unique: Permit adding at most one instance of the same callback\n    $.Callbacks = function(options) {\n        options = $.extend({}, options)\n\n        var memory, // Last fire value (for non-forgettable lists)\n            fired, // Flag to know if list was already fired\n            firing, // Flag to know if list is currently firing\n            firingStart, // First callback to fire (used internally by add and fireWith)\n            firingLength, // End of the loop when firing\n            firingIndex, // Index of currently firing callback (modified by remove if needed)\n            list = [], // Actual callback list\n            stack = !options.once && [], // Stack of fire calls for repeatable lists\n            fire = function(data) {\n                memory = options.memory && data\n                fired = true\n                firingIndex = firingStart || 0\n                firingStart = 0\n                firingLength = list.length\n                firing = true\n                for (; list && firingIndex < firingLength; ++firingIndex) {\n                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n                        memory = false\n                        break\n                    }\n                }\n                firing = false\n                if (list) {\n                    if (stack) stack.length && fire(stack.shift())\n                    else if (memory) list.length = 0\n                    else Callbacks.disable()\n                }\n            },\n\n            Callbacks = {\n                add: function() {\n                    if (list) {\n                        var start = list.length,\n                            add = function(args) {\n                                $.each(args, function(_, arg) {\n                                    if (typeof arg === \"function\") {\n                                        if (!options.unique || !Callbacks.has(arg)) list.push(arg)\n                                    } else if (arg && arg.length && typeof arg !== 'string') add(arg)\n                                })\n                            }\n                        add(arguments)\n                        if (firing) firingLength = list.length\n                        else if (memory) {\n                            firingStart = start\n                            fire(memory)\n                        }\n                    }\n                    return this\n                },\n                remove: function() {\n                    if (list) {\n                        $.each(arguments, function(_, arg) {\n                            var index\n                            while ((index = $.inArray(arg, list, index)) > -1) {\n                                list.splice(index, 1)\n                                // Handle firing indexes\n                                if (firing) {\n                                    if (index <= firingLength) --firingLength\n                                    if (index <= firingIndex) --firingIndex\n                                }\n                            }\n                        })\n                    }\n                    return this\n                },\n                has: function(fn) {\n                    return !!(list && (fn ? $.inArray(fn, list) > -1 : list.length))\n                },\n                empty: function() {\n                    firingLength = list.length = 0\n                    return this\n                },\n                disable: function() {\n                    list = stack = memory = undefined\n                    return this\n                },\n                disabled: function() {\n                    return !list\n                },\n                lock: function() {\n                    stack = undefined;\n                    if (!memory) Callbacks.disable()\n                    return this\n                },\n                locked: function() {\n                    return !stack\n                },\n                fireWith: function(context, args) {\n                    if (list && (!fired || stack)) {\n                        args = args || []\n                        args = [context, args.slice ? args.slice() : args]\n                        if (firing) stack.push(args)\n                        else fire(args)\n                    }\n                    return this\n                },\n                fire: function() {\n                    return Callbacks.fireWith(this, arguments)\n                },\n                fired: function() {\n                    return !!fired\n                }\n            }\n\n        return Callbacks\n    };\n\n    return $;\n\n});\n"]}