{"version":3,"sources":["deferred.js"],"names":["define","$","langx","Deferred","d","ret","promise","forEach","name","ret2","apply","arguments","when","p","all","makeArray","originThen","then","onResolved","onRejected","call","results"],"mappings":";;;;;;;AAAAA,QACI,SACA,uBACD,SAASC,EAAEC,GAsCV,OApCAD,EAAEE,SAAW,WACT,IAAIC,EAAI,IAAIF,EAAMC,SACdE,GACIC,QAAU,WACN,OAAOF,EAAEE,UAcrB,OAVC,UAAU,cAAc,SAAS,aAAa,SAAS,OAAO,OAAO,OAAO,WAAW,SAAS,SAASC,QAAQ,SAASC,GACvHH,EAAIG,GAAQ,WACV,IAAIC,EAASL,EAAEI,GAAME,MAAMN,EAAEO,WAI7B,OAHIF,GAAQL,IACVK,EAAOJ,GAEFI,KAINJ,GAGXJ,EAAEW,KAAO,WACL,IAAIC,EAAIX,EAAMC,SAASW,IAAIZ,EAAMa,UAAUJ,YACvCK,EAAaH,EAAEI,KAUnB,OATAJ,EAAEI,KAAO,SAASC,EAAWC,GAOzB,OAAOH,EAAWI,KAAKP,EANT,SAASQ,GAInB,OAAOH,GAAcA,EAAWR,MAAM,KAAKW,IAEdF,IAE9BN,GAGJZ","file":"../deferred.js","sourcesContent":["define([\r\n    \"./core\",\r\n    \"skylark-langx/langx\"\r\n], function($,langx) {\r\n\r\n    $.Deferred = function() {\r\n        var d = new langx.Deferred(),\r\n            ret = {\r\n                promise : function() {\r\n                    return d.promise;\r\n                }\r\n            };\r\n\r\n        [\"resolve\",\"resolveWith\",\"reject\",\"rejectWith\",\"notify\",\"then\",\"done\",\"fail\",\"progress\",\"always\",\"state\"].forEach(function(name){\r\n            ret[name] = function() {\r\n              var ret2 =   d[name].apply(d,arguments);\r\n              if (ret2 == d) {\r\n                ret2 = ret;\r\n              }\r\n              return ret2;\r\n            }\r\n        });\r\n\r\n        return ret;\r\n    };\r\n    \r\n    $.when = function(){\r\n        var p = langx.Deferred.all(langx.makeArray(arguments)),\r\n            originThen = p.then;\r\n        p.then = function(onResolved,onRejected) {\r\n            var handler = function(results) {\r\n                //results = results.map(function(result){\r\n                //    return [result];\r\n                //});\r\n                return onResolved && onResolved.apply(null,results);\r\n            };\r\n            return originThen.call(p,handler,onRejected);\r\n        };\r\n        return p;\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n"]}