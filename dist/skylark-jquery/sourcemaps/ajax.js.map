{"version":3,"sources":["ajax.js"],"names":["define","$","langx","parseArguments","url","data","success","dataType","isFunction","undefined","addToPrefiltersOrTransports","structure","dataTypeExpression","func","i","dataTypes","toLowerCase","match","rnotwhite","jQuery","slice","unshift","push","ajaxJSONP","options","ajax","responseData","abortTimeout","_callbackName","jsonpCallback","callbackName","jsonpID","script","document","createElement","originalCallback","window","abort","errorType","triggerHandler","xhr","deferred","promise","on","e","clearTimeout","off","remove","type","ajaxSuccess","ajaxError","ajaxBeforeSend","arguments","src","replace","head","appendChild","timeout","setTimeout","ajaxSettings","Xhr","defaultOptions","XMLHttpRequest","p","request","then","error","get","apply","post","getJSON","fn","load","this","length","selector","self","parts","split","callback","response","html","rscript","find","param","prefilters","transports","ajaxPrefilter","ajaxTransport","ajaxSetup","target","settings","mixin"],"mappings":"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","file":"../ajax.js","sourcesContent":["define([\r\n    \"./core\",\r\n    \"skylark-langx/langx\"\r\n], function($,langx) {\r\n    $.ajaxJSONP = function(options, langx) {\r\n        if (!('type' in options)) return $.ajax(options)\r\n\r\n        var _callbackName = options.jsonpCallback,\r\n            callbackName = ($.isFunction(_callbackName) ?\r\n                _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),\r\n            script = document.createElement('script'),\r\n            originalCallback = window[callbackName],\r\n            responseData,\r\n            abort = function(errorType) {\r\n                $(script).triggerHandler('error', errorType || 'abort')\r\n            },\r\n            xhr = { abort: abort },\r\n            abortTimeout\r\n\r\n        if (deferred) deferred.promise(xhr)\r\n\r\n        $(script).on('load error', function(e, errorType) {\r\n            clearTimeout(abortTimeout)\r\n            $(script).off().remove()\r\n\r\n            if (e.type == 'error' || !responseData) {\r\n                ajaxError(null, errorType || 'error', xhr, options, deferred)\r\n            } else {\r\n                ajaxSuccess(responseData[0], xhr, options, deferred)\r\n            }\r\n\r\n            window[callbackName] = originalCallback\r\n            if (responseData && $.isFunction(originalCallback))\r\n                originalCallback(responseData[0])\r\n\r\n            originalCallback = responseData = undefined\r\n        })\r\n\r\n        if (ajaxBeforeSend(xhr, options) === false) {\r\n            abort('abort')\r\n            return xhr\r\n        }\r\n\r\n        window[callbackName] = function() {\r\n            responseData = arguments\r\n        }\r\n\r\n        script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\r\n        document.head.appendChild(script)\r\n\r\n        if (options.timeout > 0) abortTimeout = setTimeout(function() {\r\n            abort('timeout')\r\n        }, options.timeout)\r\n\r\n        return xhr;\r\n    }\r\n\r\n    $.ajaxSettings = langx.Xhr.defaultOptions;\r\n\r\n    $.ajaxSettings.xhr = function() {\r\n        return new window.XMLHttpRequest()\r\n    };\r\n\r\n    $.ajax = function(options) {\r\n        var p = langx.Xhr.request(options.url,options);\r\n        if (options.success) {\r\n            p = p.then(options.success,options.error);\r\n        }\r\n        return p;\r\n    };\r\n\r\n    // handle optional data/success arguments\r\n    function parseArguments(url, data, success, dataType) {\r\n        if ($.isFunction(url)) {\r\n            dataType = data, success = url, data = undefined,url = undefined;\r\n        } else if ($.isFunction(data)) {\r\n            dataType = success, success = data, data = undefined;\r\n        } \r\n        if (!$.isFunction(success)) dataType = success, success = undefined\r\n        return {\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            dataType: dataType\r\n        }\r\n    }\r\n\r\n    $.get = function( /* url, data, success, dataType */ ) {\r\n        return $.ajax(parseArguments.apply(null, arguments))\r\n    }\r\n\r\n    $.post = function( /* url, data, success, dataType */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.type = 'POST'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.getJSON = function( /* url, data, success */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.dataType = 'json'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.fn.load = function(url, data, success) {\r\n        if (!this.length) return this\r\n        var self = this,\r\n            options = parseArguments(url, data, success),\r\n            parts = options.url && options.url.split(/\\s/),\r\n            selector,\r\n            callback = options.success\r\n        if (parts && parts.length > 1) options.url = parts[0], selector = parts[1]\r\n        options.success = function(response) {\r\n            self.html(selector ?\r\n                $('<div>').html(response.replace(rscript, \"\")).find(selector) : response)\r\n            callback && callback.apply(self, arguments)\r\n        }\r\n        $.ajax(options)\r\n        return this\r\n    }\r\n\r\n    $.param = langx.Xhr.param;\r\n\r\n\r\n    // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\n    function addToPrefiltersOrTransports(structure) {\r\n\r\n        // dataTypeExpression is optional and defaults to \"*\"\r\n        return function(dataTypeExpression, func) {\r\n\r\n            if (typeof dataTypeExpression !== \"string\") {\r\n                func = dataTypeExpression;\r\n                dataTypeExpression = \"*\";\r\n            }\r\n\r\n            var dataType,\r\n                i = 0,\r\n                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\r\n\r\n            if (jQuery.isFunction(func)) {\r\n\r\n                // For each dataType in the dataTypeExpression\r\n                while ((dataType = dataTypes[i++])) {\r\n\r\n                    // Prepend if requested\r\n                    if (dataType[0] === \"+\") {\r\n                        dataType = dataType.slice(1) || \"*\";\r\n                        (structure[dataType] = structure[dataType] || []).unshift(func);\r\n\r\n                        // Otherwise append\r\n                    } else {\r\n                        (structure[dataType] = structure[dataType] || []).push(func);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    var\r\n        prefilters = {},\r\n        transports = {},\r\n        rnotwhite = (/\\S+/g);\r\n\r\n    $.ajaxPrefilter = addToPrefiltersOrTransports(prefilters);\r\n    $.ajaxTransport = addToPrefiltersOrTransports(transports);\r\n    $.ajaxSetup = function(target, settings) {\r\n        langx.mixin(langx.Xhr.defaultOptions,target,settings);\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n"]}