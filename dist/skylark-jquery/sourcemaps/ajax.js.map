{"version":3,"sources":["ajax.js"],"names":["define","langx","Xhr","$","jsonpID","appendQuery","url","query","replace","parseArguments","data","success","dataType","isFunction","undefined","each","i","type","fn","this","on","ajaxJSONP","options","responseData","abortTimeout","deferred","Deferred","_callbackName","jsonpCallback","callbackName","script","document","createElement","originalCallback","window","abort","errorType","triggerHandler","xhr","key","e","clearTimeout","off","remove","resolve","reject","arguments","src","head","appendChild","timeout","setTimeout","ajaxSettings","processData","ajax","isString","mixin","test","jsonp","p","request","then","status","trigger","apply","complete","error","done","fail","always","get","post","getJSON","originalLoad","load","addToPrefiltersOrTransports","structure","dataTypeExpression","func","dataTypes","toLowerCase","match","rnotwhite","jQuery","slice","unshift","push","length","selector","self","parts","split","callback","response","html","rscript","find","param","ajaxPrefilter","ajaxTransport","ajaxSetup","target","settings","defaultOptions","getScript"],"mappings":"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","file":"../ajax.js","sourcesContent":["define([\r\n    \"skylark-langx/langx\",\r\n    \"skylark-net-http/Xhr\",\r\n    \"./core\",\r\n], function(langx,Xhr,$) {\r\n    var jsonpID = 0;\r\n\r\n     // Attach a bunch of functions for handling common AJAX events\r\n    $.each( [\r\n        \"ajaxStart\",\r\n        \"ajaxStop\",\r\n        \"ajaxComplete\",\r\n        \"ajaxError\",\r\n        \"ajaxSuccess\",\r\n        \"ajaxSend\"\r\n    ], function( i, type ) {\r\n        $.fn[ type ] = function( fn ) {\r\n            return this.on( type, fn );\r\n        };\r\n    } );\r\n   \r\n\r\n    function appendQuery(url, query) {\r\n        if (query == '') return url\r\n        return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n    }\r\n    \r\n    $.ajaxJSONP = function(options) {\r\n        var deferred = new langx.Deferred();\r\n        var _callbackName = options.jsonpCallback,\r\n            callbackName = ($.isFunction(_callbackName) ?\r\n                _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),\r\n            script = document.createElement('script'),\r\n            originalCallback = window[callbackName],\r\n            responseData,\r\n            abort = function(errorType) {\r\n                $(script).triggerHandler('error', errorType || 'abort')\r\n            },\r\n            xhr = { abort: abort },\r\n            abortTimeout;\r\n\r\n        for (var key in options.data) {\r\n            options.url = appendQuery(options.url, key + \"=\" + options.data[key]);\r\n        }\r\n         \r\n//        if (deferred) deferred.promise(xhr)\r\n\r\n        $(script).on('load error', function(e, errorType) {\r\n            clearTimeout(abortTimeout)\r\n            $(script).off().remove()\r\n\r\n            if (e.type == 'error' || !responseData) {\r\n                deferred.reject(e);\r\n            } else {\r\n                deferred.resolve(responseData[0],200,xhr);\r\n            }\r\n\r\n            window[callbackName] = originalCallback\r\n            if (responseData && $.isFunction(originalCallback))\r\n                originalCallback(responseData[0])\r\n\r\n            originalCallback = responseData = undefined\r\n        })\r\n\r\n        window[callbackName] = function() {\r\n            responseData = arguments\r\n        }\r\n\r\n        script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\r\n        document.head.appendChild(script)\r\n\r\n        if (options.timeout > 0) abortTimeout = setTimeout(function() {\r\n            abort('timeout')\r\n        }, options.timeout)\r\n\r\n        return deferred;\r\n    }\r\n\r\n    //$.ajaxSettings = Xhr.defaultOptions;\r\n    //$.ajaxSettings.xhr = function() {\r\n    //    return new window.XMLHttpRequest()\r\n    //};\r\n\r\n    $.ajaxSettings = {\r\n        processData : true\r\n    };\r\n\r\n\r\n    $.ajax = function(url,options) {\r\n        if (!url) {\r\n            options = {\r\n                url :  \"./\"\r\n            };\r\n        } else if (!options) {\r\n            if (langx.isString(url)) {\r\n                options = {\r\n                    url :  url\r\n                };\r\n            } else {\r\n                options = url;\r\n            }\r\n        } else {\r\n            options.url = url;\r\n        }\r\n\r\n        options = langx.mixin({},$.ajaxSettings,options);\r\n\r\n        if ('jsonp' == options.dataType) {\r\n            var hasPlaceholder = /\\?.+=\\?/.test(options.url);\r\n\r\n            if (!hasPlaceholder)\r\n                options.url = appendQuery(options.url,\r\n                    options.jsonp ? (options.jsonp + '=?') : options.jsonp === false ? '' : 'callback=?')\r\n            return $.ajaxJSONP(options);\r\n        }\r\n\r\n        function ajaxSuccess(data,status,xhr) {\r\n            $(document).trigger(\"ajaxSucess\");\r\n            if (options.success) {\r\n                options.success.apply(this,arguments);\r\n            }\r\n            if (options.complete) {\r\n                options.complete.apply(this,arguments);\r\n            }\r\n            return data;\r\n        }\r\n\r\n        function ajaxError() {\r\n            $(document).trigger(\"ajaxError\");\r\n            if (options.error) {\r\n                options.error.apply(this,arguments);\r\n            }\r\n        }\r\n\r\n        var p = Xhr.request(options.url,options);\r\n        p = p.then(ajaxSuccess,ajaxError);\r\n        p.success = p.done;\r\n        p.error = p.fail;\r\n        p.complete = p.always;\r\n        \r\n        return p;\r\n    };\r\n\r\n    // handle optional data/success arguments\r\n    function parseArguments(url, data, success, dataType) {\r\n        if ($.isFunction(url)) {\r\n            dataType = data, success = url, data = undefined,url = undefined;\r\n        } else if ($.isFunction(data)) {\r\n            dataType = success, success = data, data = undefined;\r\n        } \r\n        if (!$.isFunction(success)) dataType = success, success = undefined\r\n        return {\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            dataType: dataType\r\n        }\r\n    }\r\n\r\n    $.get = function( /* url, data, success, dataType */ ) {\r\n        return $.ajax(parseArguments.apply(null, arguments))\r\n    }\r\n\r\n    $.post = function( /* url, data, success, dataType */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.type = 'POST'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.getJSON = function( /* url, data, success */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.dataType = 'json'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    var originalLoad = $.fn.load;\r\n\r\n    $.fn.load = function(url, data, success) {\r\n        if (\"string\" != typeof url && originalLoad) {\r\n            return originalLoad.apply(this, arguments);\r\n        }\r\n        if (!this.length) return this\r\n        var self = this,\r\n            options = parseArguments(url, data, success),\r\n            parts = options.url && options.url.split(/\\s/),\r\n            selector,\r\n            callback = options.success\r\n        if (parts && parts.length > 1) options.url = parts[0], selector = parts[1]\r\n\r\n        if (options.data && typeof options.data === \"object\") {\r\n            options.type = \"POST\";\r\n        }\r\n        options.success = function(response) {\r\n            self.html(selector ?\r\n                $('<div>').html(response.replace(rscript, \"\")).find(selector) : response)\r\n            callback && callback.apply(self, arguments)\r\n        }\r\n        $.ajax(options)\r\n        return this\r\n    }\r\n\r\n    $.param = Xhr.param;\r\n\r\n\r\n    // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\n    function addToPrefiltersOrTransports(structure) {\r\n\r\n        // dataTypeExpression is optional and defaults to \"*\"\r\n        return function(dataTypeExpression, func) {\r\n\r\n            if (typeof dataTypeExpression !== \"string\") {\r\n                func = dataTypeExpression;\r\n                dataTypeExpression = \"*\";\r\n            }\r\n\r\n            var dataType,\r\n                i = 0,\r\n                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\r\n\r\n            if (jQuery.isFunction(func)) {\r\n\r\n                // For each dataType in the dataTypeExpression\r\n                while ((dataType = dataTypes[i++])) {\r\n\r\n                    // Prepend if requested\r\n                    if (dataType[0] === \"+\") {\r\n                        dataType = dataType.slice(1) || \"*\";\r\n                        (structure[dataType] = structure[dataType] || []).unshift(func);\r\n\r\n                        // Otherwise append\r\n                    } else {\r\n                        (structure[dataType] = structure[dataType] || []).push(func);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    var\r\n        prefilters = {},\r\n        transports = {},\r\n        rnotwhite = (/\\S+/g);\r\n\r\n    $.ajaxPrefilter = addToPrefiltersOrTransports(prefilters);\r\n    $.ajaxTransport = addToPrefiltersOrTransports(transports);\r\n    $.ajaxSetup = function(target, settings) {\r\n        langx.mixin(Xhr.defaultOptions,target,settings);\r\n    };\r\n\r\n    $.getScript = function( url, callback ) {\r\n        return $.get( url, undefined, callback, \"script\" );\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n"]}