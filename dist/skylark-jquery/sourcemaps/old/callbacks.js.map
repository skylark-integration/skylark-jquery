{"version":3,"sources":["old/callbacks.js"],"names":["define","$","Callbacks","options","memory","fired","firing","firingStart","firingLength","firingIndex","list","stack","extend","once","fire","data","length","apply","stopOnFalse","shift","disable","add","start","args","each","_","arg","unique","has","push","arguments","this","remove","index","inArray","splice","fn","empty","undefined","disabled","lock","locked","fireWith","context","slice"],"mappings":";;;;;;;AAAAA,QACI,UACD,SAASC,GA0HR,OA9GAA,EAAEC,UAAY,SAASC,GAGnB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,KACAC,IATJR,EAAUF,EAAEW,UAAWT,IASFU,SACjBC,EAAO,SAASC,GAOZ,IANAX,EAASD,EAAQC,QAAUW,EAC3BV,GAAQ,EACRI,EAAcF,GAAe,EAC7BA,EAAc,EACdC,EAAeE,EAAKM,OACpBV,GAAS,EACFI,GAAQD,EAAcD,IAAgBC,EACzC,IAAkD,IAA9CC,EAAKD,GAAaQ,MAAMF,EAAK,GAAIA,EAAK,KAAiBZ,EAAQe,YAAa,CAC5Ed,GAAS,EACT,MAGRE,GAAS,EACLI,IACIC,EAAOA,EAAMK,QAAUF,EAAKH,EAAMQ,SAC7Bf,EAAQM,EAAKM,OAAS,EAC1Bd,EAAUkB,YAIvBlB,GACImB,IAAK,WACD,GAAIX,EAAM,CACN,IAAIY,EAAQZ,EAAKM,OACbK,EAAM,SAASE,GACXtB,EAAEuB,KAAKD,EAAM,SAASE,EAAGC,GACF,mBAARA,EACFvB,EAAQwB,QAAWzB,EAAU0B,IAAIF,IAAMhB,EAAKmB,KAAKH,GAC/CA,GAAOA,EAAIV,QAAyB,iBAARU,GAAkBL,EAAIK,MAGzEL,EAAIS,WACAxB,EAAQE,EAAeE,EAAKM,OACvBZ,IACLG,EAAce,EACdR,EAAKV,IAGb,OAAO2B,MAEXC,OAAQ,WAcJ,OAbItB,GACAT,EAAEuB,KAAKM,UAAW,SAASL,EAAGC,GAE1B,IADA,IAAIO,GACIA,EAAQhC,EAAEiC,QAAQR,EAAKhB,EAAMuB,KAAW,GAC5CvB,EAAKyB,OAAOF,EAAO,GAEf3B,IACI2B,GAASzB,KAAgBA,EACzByB,GAASxB,KAAeA,KAKrCsB,MAEXH,IAAK,SAASQ,GACV,SAAU1B,KAAS0B,EAAKnC,EAAEiC,QAAQE,EAAI1B,IAAS,EAAIA,EAAKM,UAE5DqB,MAAO,WAEH,OADA7B,EAAeE,EAAKM,OAAS,EACtBe,MAEXX,QAAS,WAEL,OADAV,EAAOC,EAAQP,OAASkC,EACjBP,MAEXQ,SAAU,WACN,OAAQ7B,GAEZ8B,KAAM,WAGF,OAFA7B,OAAQ2B,EACHlC,GAAQF,EAAUkB,UAChBW,MAEXU,OAAQ,WACJ,OAAQ9B,GAEZ+B,SAAU,SAASC,EAASpB,GAOxB,OANIb,GAAUL,IAASM,IAEnBY,GAAQoB,GADRpB,EAAOA,OACeqB,MAAQrB,EAAKqB,QAAUrB,GACzCjB,EAAQK,EAAMkB,KAAKN,GAClBT,EAAKS,IAEPQ,MAEXjB,KAAM,WACF,OAAOZ,EAAUwC,SAASX,KAAMD,YAEpCzB,MAAO,WACH,QAASA,IAIrB,OAAOH,GAGJD","file":"../../old/callbacks.js","sourcesContent":["define([\r\n    \"./core\"\r\n], function($) {\r\n\r\n    //     This module is borrow from zepto.callback.js\r\n    //     (c) 2010-2014 Thomas Fuchs\r\n    //     Zepto.js may be freely distributed under the MIT license.\r\n\r\n    // Create a collection of callbacks to be fired in a sequence, with configurable behaviour\r\n    // Option flags:\r\n    //   - once: Callbacks fired at most one time.\r\n    //   - memory: Remember the most recent context and arguments\r\n    //   - stopOnFalse: Cease iterating over callback list\r\n    //   - unique: Permit adding at most one instance of the same callback\r\n    $.Callbacks = function(options) {\r\n        options = $.extend({}, options)\r\n\r\n        var memory, // Last fire value (for non-forgettable lists)\r\n            fired, // Flag to know if list was already fired\r\n            firing, // Flag to know if list is currently firing\r\n            firingStart, // First callback to fire (used internally by add and fireWith)\r\n            firingLength, // End of the loop when firing\r\n            firingIndex, // Index of currently firing callback (modified by remove if needed)\r\n            list = [], // Actual callback list\r\n            stack = !options.once && [], // Stack of fire calls for repeatable lists\r\n            fire = function(data) {\r\n                memory = options.memory && data\r\n                fired = true\r\n                firingIndex = firingStart || 0\r\n                firingStart = 0\r\n                firingLength = list.length\r\n                firing = true\r\n                for (; list && firingIndex < firingLength; ++firingIndex) {\r\n                    if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\r\n                        memory = false\r\n                        break\r\n                    }\r\n                }\r\n                firing = false\r\n                if (list) {\r\n                    if (stack) stack.length && fire(stack.shift())\r\n                    else if (memory) list.length = 0\r\n                    else Callbacks.disable()\r\n                }\r\n            },\r\n\r\n            Callbacks = {\r\n                add: function() {\r\n                    if (list) {\r\n                        var start = list.length,\r\n                            add = function(args) {\r\n                                $.each(args, function(_, arg) {\r\n                                    if (typeof arg === \"function\") {\r\n                                        if (!options.unique || !Callbacks.has(arg)) list.push(arg)\r\n                                    } else if (arg && arg.length && typeof arg !== 'string') add(arg)\r\n                                })\r\n                            }\r\n                        add(arguments)\r\n                        if (firing) firingLength = list.length\r\n                        else if (memory) {\r\n                            firingStart = start\r\n                            fire(memory)\r\n                        }\r\n                    }\r\n                    return this\r\n                },\r\n                remove: function() {\r\n                    if (list) {\r\n                        $.each(arguments, function(_, arg) {\r\n                            var index\r\n                            while ((index = $.inArray(arg, list, index)) > -1) {\r\n                                list.splice(index, 1)\r\n                                // Handle firing indexes\r\n                                if (firing) {\r\n                                    if (index <= firingLength) --firingLength\r\n                                    if (index <= firingIndex) --firingIndex\r\n                                }\r\n                            }\r\n                        })\r\n                    }\r\n                    return this\r\n                },\r\n                has: function(fn) {\r\n                    return !!(list && (fn ? $.inArray(fn, list) > -1 : list.length))\r\n                },\r\n                empty: function() {\r\n                    firingLength = list.length = 0\r\n                    return this\r\n                },\r\n                disable: function() {\r\n                    list = stack = memory = undefined\r\n                    return this\r\n                },\r\n                disabled: function() {\r\n                    return !list\r\n                },\r\n                lock: function() {\r\n                    stack = undefined;\r\n                    if (!memory) Callbacks.disable()\r\n                    return this\r\n                },\r\n                locked: function() {\r\n                    return !stack\r\n                },\r\n                fireWith: function(context, args) {\r\n                    if (list && (!fired || stack)) {\r\n                        args = args || []\r\n                        args = [context, args.slice ? args.slice() : args]\r\n                        if (firing) stack.push(args)\r\n                        else fire(args)\r\n                    }\r\n                    return this\r\n                },\r\n                fire: function() {\r\n                    return Callbacks.fireWith(this, arguments)\r\n                },\r\n                fired: function() {\r\n                    return !!fired\r\n                }\r\n            }\r\n\r\n        return Callbacks\r\n    };\r\n\r\n    return $;\r\n\r\n});\r\n"]}