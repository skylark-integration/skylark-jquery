{"version":3,"sources":["old/ajax.js"],"names":["define","$","key","name","jsonpID","document","window","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","originAnchor","createElement","triggerGlobal","settings","context","eventName","data","global","event","Event","trigger","isDefaultPrevented","triggerAndReturn","ajaxBeforeSend","xhr","beforeSend","call","ajaxSuccess","deferred","success","resolveWith","ajaxComplete","ajaxError","error","type","rejectWith","status","complete","active","ajaxStop","empty","appendQuery","url","query","replace","parseArguments","dataType","isFunction","undefined","href","location","ajaxJSONP","options","ajax","responseData","abortTimeout","_callbackName","jsonpCallback","callbackName","script","originalCallback","abort","errorType","triggerHandler","promise","on","e","clearTimeout","off","remove","arguments","src","head","appendChild","timeout","setTimeout","ajaxSettings","XMLHttpRequest","accepts","json","xml","html","text","crossDomain","processData","cache","urlAnchor","extend","Deferred","ajaxStart","protocol","host","toString","param","traditional","toUpperCase","serializeData","hasPlaceholder","test","Date","now","jsonp","mime","headers","setHeader","value","toLowerCase","RegExp","$1","nativeSetHeader","setRequestHeader","mimeType","indexOf","split","overrideMimeType","contentType","onreadystatechange","readyState","result","getResponseHeader","responseText","eval","responseXML","parseJSON","statusText","xhrFields","async","open","username","password","apply","send","get","post","getJSON","fn","load","this","length","selector","self","parts","callback","response","find","escape","encodeURIComponent","obj","params","add","push","serialize","scope","array","isArray","hash","isPlainObject","each","join","transports","rnotwhite","addToPrefiltersOrTransports","structure","dataTypeExpression","func","i","dataTypes","match","jQuery","slice","unshift","ajaxExtend","target","deep","flatOptions","ajaxPrefilter","ajaxTransport","ajaxSetup"],"mappings":"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","file":"../../old/ajax.js","sourcesContent":["define([\r\n    \"./core\",\r\n    \"./deferred\"\r\n], function($) {\r\n    \r\n    //     zepto.ajax.js\r\n    //     (c) 2010-2014 Thomas Fuchs\r\n    //     Zepto.js may be freely distributed under the MIT license.\r\n\r\n    var jsonpID = 0,\r\n        document = window.document,\r\n        key,\r\n        name,\r\n        rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n        scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n        xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n        jsonType = 'application/json',\r\n        htmlType = 'text/html',\r\n        blankRE = /^\\s*$/,\r\n        originAnchor = document.createElement('a');\r\n\r\n    originAnchor.href = window.location.href;\r\n\r\n    // trigger a custom event and return false if it was cancelled\r\n    function triggerAndReturn(context, eventName, data) {\r\n        var event = $.Event(eventName)\r\n        $(context).trigger(event, data)\r\n        return !event.isDefaultPrevented()\r\n    }\r\n\r\n    // trigger an Ajax \"global\" event\r\n    function triggerGlobal(settings, context, eventName, data) {\r\n        if (settings.global) return triggerAndReturn(context || document, eventName, data)\r\n    }\r\n\r\n    // Number of active Ajax requests\r\n    $.active = 0;\r\n\r\n    function ajaxStart(settings) {\r\n        if (settings.global && $.active++ === 0) triggerGlobal(settings, null, 'ajaxStart')\r\n    }\r\n\r\n    function ajaxStop(settings) {\r\n        if (settings.global && !(--$.active)) triggerGlobal(settings, null, 'ajaxStop')\r\n    }\r\n\r\n    // triggers an extra global event \"ajaxBeforeSend\" that's like \"ajaxSend\" but cancelable\r\n    function ajaxBeforeSend(xhr, settings) {\r\n        var context = settings.context\r\n        if (settings.beforeSend.call(context, xhr, settings) === false ||\r\n            triggerGlobal(settings, context, 'ajaxBeforeSend', [xhr, settings]) === false)\r\n            return false\r\n\r\n        triggerGlobal(settings, context, 'ajaxSend', [xhr, settings])\r\n    }\r\n\r\n    function ajaxSuccess(data, xhr, settings, deferred) {\r\n        var context = settings.context,\r\n            status = 'success'\r\n        settings.success.call(context, data, status, xhr)\r\n        if (deferred) deferred.resolveWith(context, [data, status, xhr])\r\n        triggerGlobal(settings, context, 'ajaxSuccess', [xhr, settings, data])\r\n        ajaxComplete(status, xhr, settings)\r\n    }\r\n    // type: \"timeout\", \"error\", \"abort\", \"parsererror\"\r\n    function ajaxError(error, type, xhr, settings, deferred) {\r\n        var context = settings.context\r\n        settings.error.call(context, xhr, type, error)\r\n        if (deferred) deferred.rejectWith(context, [xhr, type, error])\r\n        triggerGlobal(settings, context, 'ajaxError', [xhr, settings, error || type])\r\n        ajaxComplete(type, xhr, settings)\r\n    }\r\n    // status: \"success\", \"notmodified\", \"error\", \"timeout\", \"abort\", \"parsererror\"\r\n    function ajaxComplete(status, xhr, settings) {\r\n        var context = settings.context\r\n        settings.complete.call(context, xhr, status)\r\n        triggerGlobal(settings, context, 'ajaxComplete', [xhr, settings])\r\n        ajaxStop(settings)\r\n    }\r\n\r\n    // Empty function, used as default callback\r\n    function empty() {}\r\n\r\n    $.ajaxJSONP = function(options, deferred) {\r\n        if (!('type' in options)) return $.ajax(options)\r\n\r\n        var _callbackName = options.jsonpCallback,\r\n            callbackName = ($.isFunction(_callbackName) ?\r\n                _callbackName() : _callbackName) || ('jsonp' + (++jsonpID)),\r\n            script = document.createElement('script'),\r\n            originalCallback = window[callbackName],\r\n            responseData,\r\n            abort = function(errorType) {\r\n                $(script).triggerHandler('error', errorType || 'abort')\r\n            },\r\n            xhr = { abort: abort },\r\n            abortTimeout\r\n\r\n        if (deferred) deferred.promise(xhr)\r\n\r\n        $(script).on('load error', function(e, errorType) {\r\n            clearTimeout(abortTimeout)\r\n            $(script).off().remove()\r\n\r\n            if (e.type == 'error' || !responseData) {\r\n                ajaxError(null, errorType || 'error', xhr, options, deferred)\r\n            } else {\r\n                ajaxSuccess(responseData[0], xhr, options, deferred)\r\n            }\r\n\r\n            window[callbackName] = originalCallback\r\n            if (responseData && $.isFunction(originalCallback))\r\n                originalCallback(responseData[0])\r\n\r\n            originalCallback = responseData = undefined\r\n        })\r\n\r\n        if (ajaxBeforeSend(xhr, options) === false) {\r\n            abort('abort')\r\n            return xhr\r\n        }\r\n\r\n        window[callbackName] = function() {\r\n            responseData = arguments\r\n        }\r\n\r\n        script.src = options.url.replace(/\\?(.+)=\\?/, '?$1=' + callbackName)\r\n        document.head.appendChild(script)\r\n\r\n        if (options.timeout > 0) abortTimeout = setTimeout(function() {\r\n            abort('timeout')\r\n        }, options.timeout)\r\n\r\n        return xhr;\r\n    }\r\n\r\n    $.ajaxSettings = {\r\n        // Default type of request\r\n        type: 'GET',\r\n        // Callback that is executed before request\r\n        beforeSend: empty,\r\n        // Callback that is executed if the request succeeds\r\n        success: empty,\r\n        // Callback that is executed the the server drops error\r\n        error: empty,\r\n        // Callback that is executed on request complete (both: error and success)\r\n        complete: empty,\r\n        // The context for the callbacks\r\n        context: null,\r\n        // Whether to trigger \"global\" Ajax events\r\n        global: true,\r\n        // Transport\r\n        xhr: function() {\r\n            return new window.XMLHttpRequest()\r\n        },\r\n        // MIME types mapping\r\n        // IIS returns Javascript as \"application/x-javascript\"\r\n        accepts: {\r\n            script: 'text/javascript, application/javascript, application/x-javascript',\r\n            json: jsonType,\r\n            xml: 'application/xml, text/xml',\r\n            html: htmlType,\r\n            text: 'text/plain'\r\n        },\r\n        // Whether the request is to another domain\r\n        crossDomain: false,\r\n        // Default timeout\r\n        timeout: 0,\r\n        // Whether data should be serialized to string\r\n        processData: true,\r\n        // Whether the browser should be allowed to cache GET responses\r\n        cache: true\r\n    }\r\n\r\n    function mimeToDataType(mime) {\r\n        if (mime) mime = mime.split(';', 2)[0]\r\n        return mime && (mime == htmlType ? 'html' :\r\n            mime == jsonType ? 'json' :\r\n            scriptTypeRE.test(mime) ? 'script' :\r\n            xmlTypeRE.test(mime) && 'xml') || 'text'\r\n    }\r\n\r\n    function appendQuery(url, query) {\r\n        if (query == '') return url\r\n        return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n    }\r\n\r\n    // serialize payload and append it to the URL for GET requests\r\n    function serializeData(options) {\r\n        if (options.processData && options.data && $.type(options.data) != \"string\")\r\n            options.data = $.param(options.data, options.traditional)\r\n        if (options.data && (!options.type || options.type.toUpperCase() == 'GET'))\r\n            options.url = appendQuery(options.url, options.data), options.data = undefined\r\n    }\r\n\r\n    $.ajax = function(options) {\r\n        var settings = $.extend({}, options || {}),\r\n            deferred = $.Deferred && $.Deferred(),\r\n            urlAnchor\r\n        for (key in $.ajaxSettings)\r\n            if (settings[key] === undefined) settings[key] = $.ajaxSettings[key]\r\n\r\n        ajaxStart(settings)\r\n\r\n        if (!settings.crossDomain) {\r\n            urlAnchor = document.createElement('a')\r\n            urlAnchor.href = settings.url\r\n            urlAnchor.href = urlAnchor.href\r\n            settings.crossDomain = (originAnchor.protocol + '//' + originAnchor.host) !== (urlAnchor.protocol + '//' + urlAnchor.host)\r\n        }\r\n\r\n        if (!settings.url) settings.url = window.location.toString()\r\n        serializeData(settings)\r\n\r\n        var dataType = settings.dataType,\r\n            hasPlaceholder = /\\?.+=\\?/.test(settings.url)\r\n        if (hasPlaceholder) dataType = 'jsonp'\r\n\r\n        if (settings.cache === false || (\r\n                (!options || options.cache !== true) &&\r\n                ('script' == dataType || 'jsonp' == dataType)\r\n            ))\r\n            settings.url = appendQuery(settings.url, '_=' + Date.now())\r\n\r\n        if ('jsonp' == dataType) {\r\n            if (!hasPlaceholder)\r\n                settings.url = appendQuery(settings.url,\r\n                    settings.jsonp ? (settings.jsonp + '=?') : settings.jsonp === false ? '' : 'callback=?')\r\n            return $.ajaxJSONP(settings, deferred)\r\n        }\r\n\r\n        var mime = settings.accepts[dataType],\r\n            headers = {},\r\n            setHeader = function(name, value) { headers[name.toLowerCase()] = [name, value] },\r\n            protocol = /^([\\w-]+:)\\/\\//.test(settings.url) ? RegExp.$1 : window.location.protocol,\r\n            xhr = settings.xhr(),\r\n            nativeSetHeader = xhr.setRequestHeader,\r\n            abortTimeout\r\n\r\n        if (deferred) deferred.promise(xhr)\r\n\r\n        if (!settings.crossDomain) setHeader('X-Requested-With', 'XMLHttpRequest')\r\n        setHeader('Accept', mime || '*/*')\r\n        if (mime = settings.mimeType || mime) {\r\n            if (mime.indexOf(',') > -1) mime = mime.split(',', 2)[0]\r\n            xhr.overrideMimeType && xhr.overrideMimeType(mime)\r\n        }\r\n        if (settings.contentType || (settings.contentType !== false && settings.data && settings.type.toUpperCase() != 'GET'))\r\n            setHeader('Content-Type', settings.contentType || 'application/x-www-form-urlencoded')\r\n\r\n        if (settings.headers)\r\n            for (name in settings.headers) setHeader(name, settings.headers[name])\r\n        xhr.setRequestHeader = setHeader\r\n\r\n        xhr.onreadystatechange = function() {\r\n            if (xhr.readyState == 4) {\r\n                xhr.onreadystatechange = empty\r\n                clearTimeout(abortTimeout)\r\n                var result, error = false\r\n                if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && protocol == 'file:')) {\r\n                    dataType = dataType || mimeToDataType(settings.mimeType || xhr.getResponseHeader('content-type'))\r\n                    result = xhr.responseText\r\n\r\n                    try {\r\n                        // http://perfectionkills.com/global-eval-what-are-the-options/\r\n                        if (dataType == 'script')(1, eval)(result)\r\n                        else if (dataType == 'xml') result = xhr.responseXML\r\n                        else if (dataType == 'json') result = blankRE.test(result) ? null : $.parseJSON(result)\r\n                    } catch (e) { error = e }\r\n\r\n                    if (error) ajaxError(error, 'parsererror', xhr, settings, deferred)\r\n                    else ajaxSuccess(result, xhr, settings, deferred)\r\n                } else {\r\n                    ajaxError(xhr.statusText || null, xhr.status ? 'error' : 'abort', xhr, settings, deferred)\r\n                }\r\n            }\r\n        }\r\n\r\n        if (ajaxBeforeSend(xhr, settings) === false) {\r\n            xhr.abort()\r\n            ajaxError(null, 'abort', xhr, settings, deferred)\r\n            return xhr\r\n        }\r\n\r\n        if (settings.xhrFields)\r\n            for (name in settings.xhrFields) xhr[name] = settings.xhrFields[name]\r\n\r\n        var async = 'async' in settings ? settings.async : true\r\n        xhr.open(settings.type, settings.url, async, settings.username, settings.password)\r\n\r\n        for (name in headers) nativeSetHeader.apply(xhr, headers[name])\r\n\r\n        if (settings.timeout > 0) abortTimeout = setTimeout(function() {\r\n            xhr.onreadystatechange = empty\r\n            xhr.abort()\r\n            ajaxError(null, 'timeout', xhr, settings, deferred)\r\n        }, settings.timeout)\r\n\r\n        // avoid sending empty string (#319)\r\n        xhr.send(settings.data ? settings.data : null)\r\n        return xhr\r\n    }\r\n\r\n    // handle optional data/success arguments\r\n    function parseArguments(url, data, success, dataType) {\r\n        if ($.isFunction(data)) dataType = success, success = data, data = undefined\r\n        if (!$.isFunction(success)) dataType = success, success = undefined\r\n        return {\r\n            url: url,\r\n            data: data,\r\n            success: success,\r\n            dataType: dataType\r\n        }\r\n    }\r\n\r\n    $.get = function( /* url, data, success, dataType */ ) {\r\n        return $.ajax(parseArguments.apply(null, arguments))\r\n    }\r\n\r\n    $.post = function( /* url, data, success, dataType */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.type = 'POST'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.getJSON = function( /* url, data, success */ ) {\r\n        var options = parseArguments.apply(null, arguments)\r\n        options.dataType = 'json'\r\n        return $.ajax(options)\r\n    }\r\n\r\n    $.fn.load = function(url, data, success) {\r\n        if (!this.length) return this\r\n        var self = this,\r\n            parts = url.split(/\\s/),\r\n            selector,\r\n            options = parseArguments(url, data, success),\r\n            callback = options.success\r\n        if (parts.length > 1) options.url = parts[0], selector = parts[1]\r\n        options.success = function(response) {\r\n            self.html(selector ?\r\n                $('<div>').html(response.replace(rscript, \"\")).find(selector) : response)\r\n            callback && callback.apply(self, arguments)\r\n        }\r\n        $.ajax(options)\r\n        return this\r\n    }\r\n\r\n    var escape = encodeURIComponent\r\n\r\n    function serialize(params, obj, traditional, scope) {\r\n        var type, array = $.isArray(obj),\r\n            hash = $.isPlainObject(obj)\r\n        $.each(obj, function(key, value) {\r\n            type = $.type(value)\r\n            if (scope) key = traditional ? scope :\r\n                scope + '[' + (hash || type == 'object' || type == 'array' ? key : '') + ']'\r\n            // handle data in serializeArray() format\r\n            if (!scope && array) params.add(value.name, value.value)\r\n            // recurse into nested objects\r\n            else if (type == \"array\" || (!traditional && type == \"object\"))\r\n                serialize(params, value, traditional, key)\r\n            else params.add(key, value)\r\n        })\r\n    }\r\n\r\n    $.param = function(obj, traditional) {\r\n        var params = []\r\n        params.add = function(key, value) {\r\n            if ($.isFunction(value)) value = value()\r\n            if (value == null) value = \"\"\r\n            this.push(escape(key) + '=' + escape(value))\r\n        }\r\n        serialize(params, obj, traditional)\r\n        return params.join('&').replace(/%20/g, '+')\r\n    };\r\n\r\n    var\r\n        /* Prefilters\r\n         * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)\r\n         * 2) These are called:\r\n         *    - BEFORE asking for a transport\r\n         *    - AFTER param serialization (s.data is a string if s.processData is true)\r\n         * 3) key is the dataType\r\n         * 4) the catchall symbol \"*\" can be used\r\n         * 5) execution will start with transport dataType and THEN continue down to \"*\" if needed\r\n         */\r\n        prefilters = {},\r\n\r\n        /* Transports bindings\r\n         * 1) key is the dataType\r\n         * 2) the catchall symbol \"*\" can be used\r\n         * 3) selection will start with transport dataType and THEN go to \"*\" if needed\r\n         */\r\n        transports = {},\r\n        rnotwhite = (/\\S+/g);\r\n\r\n\r\n    // Base \"constructor\" for jQuery.ajaxPrefilter and jQuery.ajaxTransport\r\n    function addToPrefiltersOrTransports(structure) {\r\n\r\n        // dataTypeExpression is optional and defaults to \"*\"\r\n        return function(dataTypeExpression, func) {\r\n\r\n            if (typeof dataTypeExpression !== \"string\") {\r\n                func = dataTypeExpression;\r\n                dataTypeExpression = \"*\";\r\n            }\r\n\r\n            var dataType,\r\n                i = 0,\r\n                dataTypes = dataTypeExpression.toLowerCase().match(rnotwhite) || [];\r\n\r\n            if (jQuery.isFunction(func)) {\r\n\r\n                // For each dataType in the dataTypeExpression\r\n                while ((dataType = dataTypes[i++])) {\r\n\r\n                    // Prepend if requested\r\n                    if (dataType[0] === \"+\") {\r\n                        dataType = dataType.slice(1) || \"*\";\r\n                        (structure[dataType] = structure[dataType] || []).unshift(func);\r\n\r\n                        // Otherwise append\r\n                    } else {\r\n                        (structure[dataType] = structure[dataType] || []).push(func);\r\n                    }\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    $.ajaxPrefilter = addToPrefiltersOrTransports(prefilters);\r\n    $.ajaxTransport = addToPrefiltersOrTransports(transports);\r\n\r\n    // A special extend for ajax options\r\n    // that takes \"flat\" options (not to be deep extended)\r\n    // Fixes #9887\r\n    function ajaxExtend(target, src) {\r\n        var key, deep,\r\n            flatOptions = jQuery.ajaxSettings.flatOptions || {};\r\n\r\n        for (key in src) {\r\n            if (src[key] !== undefined) {\r\n                (flatOptions[key] ? target : (deep || (deep = {})))[key] = src[key];\r\n            }\r\n        }\r\n        if (deep) {\r\n            jQuery.extend(true, target, deep);\r\n        }\r\n\r\n        return target;\r\n    }\r\n\r\n    // Creates a full fledged settings object into target\r\n    // with both ajaxSettings and settings fields.\r\n    // If target is omitted, writes into ajaxSettings.\r\n    $.ajaxSetup = function(target, settings) {\r\n        return settings ?\r\n\r\n            // Building a settings object\r\n            ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :\r\n\r\n            // Extending ajaxSettings\r\n            ajaxExtend(jQuery.ajaxSettings, target);\r\n    };\r\n\r\n    // Base inspection function for prefilters and transports\r\n    function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {\r\n\r\n        var inspected = {},\r\n            seekingTransport = (structure === transports);\r\n\r\n        function inspect(dataType) {\r\n            var selected;\r\n            inspected[dataType] = true;\r\n            jQuery.each(structure[dataType] || [], function(_, prefilterOrFactory) {\r\n                var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);\r\n                if (typeof dataTypeOrTransport === \"string\" &&\r\n                    !seekingTransport && !inspected[dataTypeOrTransport]) {\r\n\r\n                    options.dataTypes.unshift(dataTypeOrTransport);\r\n                    inspect(dataTypeOrTransport);\r\n                    return false;\r\n                } else if (seekingTransport) {\r\n                    return !(selected = dataTypeOrTransport);\r\n                }\r\n            });\r\n            return selected;\r\n        }\r\n\r\n        return inspect(options.dataTypes[0]) || !inspected[\"*\"] && inspect(\"*\");\r\n    }\r\n\r\n    return $;\r\n\r\n});\r\n"]}